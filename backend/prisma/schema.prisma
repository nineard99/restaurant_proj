generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(cuid())
  username        String             @unique
  email           String?            @unique
  password        String
  role            GlobalRole         @default(CUSTOMER) // สิทธิ์ระดับระบบ เช่น DEV, SUPERADMIN, CUSTOMER
  restaurantLinks RestaurantUser[]   // ความสัมพันธ์กับร้าน (สิทธิ์ร้านต่าง ๆ)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model Restaurant {
  id          String           @id @default(cuid())
  name        String
  address     String?
  image       String?

  users       RestaurantUser[]  // ผู้ใช้ที่เกี่ยวข้องกับร้านนี้ พร้อมบทบาท
  tables      SeatTable[]
  menuItems   MenuItem[]
  orders      Order[]

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model RestaurantUser {
  id           String          @id @default(cuid())
  user         User            @relation(fields: [userId], references: [id])
  userId       String

  restaurant   Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId String

  role         RestaurantRole  // บทบาทของ user ในร้านนี้ เช่น OWNER, MANAGER, EMPLOYEE
}

model SeatTable {
  id           String        @id @default(cuid())
  name         String
  qrCode       String?        // สำหรับ QR code โต๊ะ
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orders       Order[]
  isOccupied   Boolean       @default(false)
  currentOccupancy Int?
}

model MenuItem {
  id           String       @id @default(cuid())
  name         String
  description  String?
  price        Float
  image        String?
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orderItems   OrderItem[]
}

model Order {
  id           String       @id @default(cuid())
  table        SeatTable        @relation(fields: [tableId], references: [id])
  tableId      String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orderItems   OrderItem[]
  status       OrderStatus  @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model OrderItem {
  id           String      @id @default(cuid())
  order        Order       @relation(fields: [orderId], references: [id])
  orderId      String
  menuItem     MenuItem    @relation(fields: [menuItemId], references: [id])
  menuItemId   String
  quantity     Int
}

enum GlobalRole {
  DEV
  SUPERADMIN
  CUSTOMER
}

enum RestaurantRole {
  OWNER
  MANAGER
  EMPLOYEE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  COOKING
  SERVED
  PAID
  CANCELLED
}
